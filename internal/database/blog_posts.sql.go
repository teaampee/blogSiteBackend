// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: blog_posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBlogPost = `-- name: CreateBlogPost :one
INSERT INTO posts (id, created_at, updated_at , title, content, user_id, blog_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, title, content, user_id, blog_id
`

type CreateBlogPostParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Title     string
	Content   string
	UserID    uuid.UUID
	BlogID    uuid.UUID
}

func (q *Queries) CreateBlogPost(ctx context.Context, arg CreateBlogPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createBlogPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Content,
		arg.UserID,
		arg.BlogID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.BlogID,
	)
	return i, err
}

const deleteUserPost = `-- name: DeleteUserPost :exec
DELETE FROM posts where id =$1 AND user_id = $2
`

type DeleteUserPostParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteUserPost(ctx context.Context, arg DeleteUserPostParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserPost, arg.ID, arg.UserID)
	return err
}

const getBlogPosts = `-- name: GetBlogPosts :many
SELECT id, created_at, updated_at, title, content, user_id, blog_id FROM posts
WHERE blog_id = $1
ORDER BY created_at DESC
LIMIT 50
`

func (q *Queries) GetBlogPosts(ctx context.Context, blogID uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getBlogPosts, blogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.BlogID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT id, created_at, updated_at, title, content, user_id, blog_id FROM posts WHERE id = $1
`

func (q *Queries) GetPost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.BlogID,
	)
	return i, err
}

const updateUserPost = `-- name: UpdateUserPost :one
UPDATE posts
SET title = $1, content = $2
WHERE  id = $3 AND user_id = $4
RETURNING id, created_at, updated_at, title, content, user_id, blog_id
`

type UpdateUserPostParams struct {
	Title   string
	Content string
	ID      uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) UpdateUserPost(ctx context.Context, arg UpdateUserPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updateUserPost,
		arg.Title,
		arg.Content,
		arg.ID,
		arg.UserID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.BlogID,
	)
	return i, err
}
